import os
import json
import logging
import time
from datetime import datetime
from typing import Dict, List
from src.services.stats_service import StatsService
from src.services.image_service import ImageService
from src.services.telegram_service import TelegramService
from src.config.settings import (
    ESPN_API,
    ESPN_TIMEZONE,
    PROCESSED_DATA_DIR,
    TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHAT_ID
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_season_stats() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–∑–æ–Ω"""
    stats_file = os.path.join(PROCESSED_DATA_DIR, 'season_stats.json')
    if not os.path.exists(stats_file):
        raise FileNotFoundError(f"–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {stats_file}")
        
    with open(stats_file, 'r', encoding='utf-8') as f:
        return json.load(f)

def get_best_players(daily_stats: Dict) -> Dict[str, List]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–Ω—è –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
    players = daily_stats.get('players', [])
    if not players:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö")
        return {}
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
    best_players = {
        'C': [],  # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ
        'LW': [], # –õ–µ–≤—ã–µ –∫—Ä–∞–π–Ω–∏–µ
        'RW': [], # –ü—Ä–∞–≤—ã–µ –∫—Ä–∞–π–Ω–∏–µ
        'D': [],  # –ó–∞—â–∏—Ç–Ω–∏–∫–∏
        'G': []   # –í—Ä–∞—Ç–∞—Ä–∏
    }
    
    # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π
    position_map = {
        1: 'C',   # Center
        2: 'LW',  # Left Wing
        3: 'RW',  # Right Wing
        4: 'D',   # Defense
        5: 'G'    # Goalie
    }
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
    for player_data in players:
        player = player_data.get('player', {})
        if not player:
            continue
            
        position_id = player.get('defaultPositionId')
        if not position_id or position_id not in position_map:
            continue
            
        position = position_map[position_id]
        stats = player_data.get('stats', {})
        
        if not stats:
            continue
            
        # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
        points = 0
        if position == 'G':
            # –î–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π
            points = (
                stats.get('wins', 0) * 5 +
                stats.get('saves', 0) * 0.2 +
                stats.get('shutouts', 0) * 3 -
                stats.get('goalsAgainst', 0) * 1
            )
        else:
            # –î–ª—è –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            points = (
                stats.get('goals', 0) * 3 +
                stats.get('assists', 0) * 2 +
                stats.get('plusMinus', 0) * 1 +
                stats.get('powerPlayPoints', 0) * 1 +
                stats.get('shots', 0) * 0.2 +
                stats.get('hits', 0) * 0.2 +
                stats.get('blockedShots', 0) * 0.5
            )
        
        best_players[position].append({
            'id': player.get('id'),
            'name': player.get('fullName'),
            'team': player.get('proTeamId'),
            'points': round(points, 1),
            'stats': stats
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-N –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
    for pos in best_players:
        best_players[pos] = sorted(
            best_players[pos],
            key=lambda x: x['points'],
            reverse=True
        )[:3 if pos != 'G' else 2]  # 3 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä–µ–π
    
    return best_players

def create_team_message(date: str, best_players: Dict[str, List]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Å—Ç–∞–≤–æ–º –∫–æ–º–∞–Ω–¥—ã –¥–Ω—è"""
    if not best_players:
        return f"üèí –ó–∞ {date} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö"
    
    message = f"üèí –ö–æ–º–∞–Ω–¥–∞ –¥–Ω—è {date}\n\n"
    
    positions = {
        'C': '‚ö°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ:',
        'LW': 'üèÉ –õ–µ–≤—ã–µ –∫—Ä–∞–π–Ω–∏–µ:',
        'RW': 'üí® –ü—Ä–∞–≤—ã–µ –∫—Ä–∞–π–Ω–∏–µ:',
        'D': 'üõ° –ó–∞—â–∏—Ç–Ω–∏–∫–∏:',
        'G': 'ü•Ö –í—Ä–∞—Ç–∞—Ä–∏:'
    }
    
    for pos, title in positions.items():
        if pos in best_players and best_players[pos]:
            message += f"\n{title}\n"
            for player in best_players[pos]:
                message += f"- {player['name']} ({player['points']} –æ—á–∫–æ–≤)\n"
    
    return message

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        season_stats = load_season_stats()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        image_service = ImageService()
        telegram_service = TelegramService(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        for daily_stat in season_stats['daily_stats']:
            date = daily_stat['date']
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}")
            
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
                best_players = get_best_players(daily_stat)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = create_team_message(date, best_players)
                
                if best_players:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂
                    collage_path = image_service.create_team_collage(best_players, date)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                    telegram_service.send_photo(collage_path, message)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–ª–ª–∞–∂–∞
                    if os.path.exists(collage_path):
                        os.remove(collage_path)
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    telegram_service.send_message(message)
                
                logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {date} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}: {str(e)}")
                continue
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise

if __name__ == '__main__':
    main() 