import argparse
import asyncio
import logging
from datetime import datetime
from src.services.team_service import TeamService
from src.services.telegram_service import TelegramService
from src.config.settings import PLAYER_POSITIONS

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def format_telegram_message(team: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
    message = [
        f"üèí *–ö–æ–º–∞–Ω–¥–∞ –¥–Ω—è - {team['date']}*\n",
        "\n*–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:*"
    ]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
    positions_order = ['C', 'LW', 'RW', 'D', 'G']
    players_by_pos = {pos: [] for pos in positions_order}
    
    for player_id, player in team['players'].items():
        position = PLAYER_POSITIONS[player['info']['primary_position']]
        players_by_pos[position].append(player)
        
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for pos in positions_order:
        for player in players_by_pos[pos]:
            message.append(
                f"\n{pos}: {player['info']['name']} - {player['stats']['total_points']} –æ—á–∫–æ–≤"
            )
            
    message.append(f"\n\n*–û–±—â–∏–µ –æ—á–∫–∏ –∫–æ–º–∞–Ω–¥—ã:* {team['total_points']}")
    
    return ''.join(message)

async def main():
    parser = argparse.ArgumentParser(description='–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–Ω—è')
    parser.add_argument('--date', type=str, help='–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--no-send', action='store_true', help='–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ Telegram')
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
    if args.date:
        date = datetime.strptime(args.date, '%Y-%m-%d')
    else:
        date = datetime.now()
        
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {date.strftime('%Y-%m-%d')}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–Ω—è
    team_service = TeamService()
    team = team_service.get_team_of_day(date)
    
    if not team:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–Ω—è")
        return
        
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –¥–Ω—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –æ–±—â–∏–µ –æ—á–∫–∏: {team['total_points']}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂
    collage_path = team_service.create_team_collage(team)
    if not collage_path:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂")
        return
        
    logger.info(f"–ö–æ–ª–ª–∞–∂ —Å–æ–∑–¥–∞–Ω: {collage_path}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if not args.no_send:
        telegram = TelegramService()
        message = format_telegram_message(team)
        sent = await telegram.send_team_of_day(message, collage_path)
        if sent:
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram")
        else:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram")

if __name__ == '__main__':
    asyncio.run(main())
