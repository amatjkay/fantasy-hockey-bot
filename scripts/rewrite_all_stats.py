#!/usr/bin/env python3

import os
import sys
import logging
import asyncio
import pytz
from datetime import datetime, timedelta
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.espn_service import ESPNService
from src.services.image_service import ImageService
from src.services.telegram_service import TelegramService
from src.config import settings
from scripts.send_daily_teams import (
    load_history,
    get_best_players_by_position,
    update_history
)

async def process_date(
    date: datetime,
    espn_service: ESPNService,
    image_service: ImageService,
    telegram_service: TelegramService,
    history: dict,
    logger: logging.Logger,
    no_send: bool = False
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
        daily_stats = espn_service.get_daily_stats(date)
        
        if not daily_stats:
            logger.warning(f"–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—Ç—ã {date.strftime('%Y-%m-%d')}")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        date_str = daily_stats.get("date")
        if not date_str:
            logger.warning("–í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞")
            return

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {date_str}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        team = get_best_players_by_position(daily_stats, date_str, history)
        
        if not team:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–∞—Ç—ã {date_str}")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        update_history(team, date_str, history)
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –¥–∞—Ç—ã {date_str}")

        if not no_send:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
            player_photos = {}
            for pos, player in team.items():
                player_id = str(player['info']['id'])
                photo_path = image_service.get_player_photo(player_id, player['info']['name'])
                if photo_path:
                    player_photos[player_id] = photo_path
                    logger.info(f"–§–æ—Ç–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player['info']['name']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂
            collage_path = image_service.create_collage(player_photos, team, date_str, None)
            if not collage_path:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂")
                return

            logger.info(f"–ö–æ–ª–ª–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {collage_path}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: LW, C, RW, D1, D2, G
            message = f"üèí –ö–æ–º–∞–Ω–¥–∞ –¥–Ω—è - {date_str}\n\n"
            positions_order = ['LW', 'C', 'RW', 'D1', 'D2', 'G']
            for pos in positions_order:
                player = team[pos]
                message += f"{pos}: {player['info']['name']} - {player['stats']['total_points']} –æ—á–∫–æ–≤\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await telegram_service.send_team_of_day(message, collage_path)
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –¥–ª—è –¥–∞—Ç—ã {date_str}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {date}: {e}")
        return

async def process_week(
    start_date: datetime,
    end_date: datetime,
    espn_service: ESPNService,
    image_service: ImageService,
    telegram_service: TelegramService,
    history: dict,
    logger: logging.Logger,
    no_send: bool = False
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –¥–Ω–∏ –ø–µ—Ä–∏–æ–¥–∞
        weekly_stats = {
            "date": f"{start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}",
            "players": []
        }
        
        current_date = start_date
        while current_date <= end_date:
            daily_stats = espn_service.get_daily_stats(current_date)
            if daily_stats and "players" in daily_stats:
                weekly_stats["players"].extend(daily_stats["players"])
            current_date += timedelta(days=1)
        
        if not weekly_stats["players"]:
            logger.warning("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–∏–æ–¥–∞
        team = get_best_players_by_position(weekly_stats, weekly_stats["date"], history)
        
        if not team:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–∏–æ–¥–∞")
            return
            
        if not no_send:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
            player_photos = {}
            for pos, player in team.items():
                player_id = str(player['info']['id'])
                photo_path = image_service.get_player_photo(player_id, player['info']['name'])
                if photo_path:
                    player_photos[player_id] = photo_path
                    logger.info(f"–§–æ—Ç–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player['info']['name']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                    
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–∏–æ–¥–∞
            collage_path = image_service.create_collage(player_photos, team, weekly_stats["date"], None)
            if not collage_path:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–∏–æ–¥–∞")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üèí –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–∏–æ–¥–∞ {weekly_stats['date']}\n\n"
            positions_order = ['LW', 'C', 'RW', 'D1', 'D2', 'G']
            for pos in positions_order:
                player = team[pos]
                message += f"{pos}: {player['info']['name']} - {player['stats']['total_points']} –æ—á–∫–æ–≤\n"
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await telegram_service.send_team_of_day(message, collage_path)
            logger.info("–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–∏–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        return

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(description='–ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    parser.add_argument('--date', help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--week', help='–ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:YYYY-MM-DD')
    parser.add_argument('--all-weeks', action='store_true', help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –ø–µ—Ä–∏–æ–¥–∞ —Å –Ω–∞—á–∞–ª–∞ —Å–µ–∑–æ–Ω–∞')
    parser.add_argument('--no-send', action='store_true', help='–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram')
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    espn_service = ESPNService()
    image_service = ImageService()
    telegram_service = TelegramService()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = load_history()
    
    if args.date:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        try:
            date = datetime.strptime(args.date, '%Y-%m-%d').replace(tzinfo=pytz.UTC)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã: {date.strftime('%Y-%m-%d')}")
            await process_date(date, espn_service, image_service, telegram_service, history, logger, args.no_send)
        except ValueError as e:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {e}")
            return
            
    elif args.week:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        try:
            if ':' not in args.week:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD:YYYY-MM-DD")
                return
            start_date_str, end_date_str = args.week.split(':')
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d').replace(tzinfo=pytz.UTC)
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d').replace(tzinfo=pytz.UTC)
            
            if start_date > end_date:
                logger.error("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")
                return
                
            await process_week(start_date, end_date, espn_service, image_service, telegram_service, history, logger, args.no_send)
        except ValueError as e:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞: {e}")
            return
            
    elif args.all_weeks:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–¥–µ–ª—å —Å –Ω–∞—á–∞–ª–∞ —Å–µ–∑–æ–Ω–∞
        start_date = datetime(2024, 10, 4, tzinfo=pytz.UTC)  # –ù–∞—á–∞–ª–æ —Å–µ–∑–æ–Ω–∞
        end_date = datetime.now(pytz.UTC) - timedelta(days=1)  # –í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        
        current_date = start_date
        while current_date <= end_date:
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            week_start = current_date - timedelta(days=current_date.weekday())  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            week_end = week_start + timedelta(days=6)  # –ü–æ–ª—É—á–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            
            if week_end > end_date:
                week_end = end_date
                
            await process_week(week_start, week_end, espn_service, image_service, telegram_service, history, logger, args.no_send)
            current_date = week_end + timedelta(days=1)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
            await asyncio.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–µ–¥–µ–ª—è–º–∏
            
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞—Ç
        start_date = datetime(2024, 10, 4, tzinfo=pytz.UTC)  # –ù–∞—á–∞–ª–æ —Å–µ–∑–æ–Ω–∞
        end_date = datetime.now(pytz.UTC) - timedelta(days=1)  # –í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞—Ç —Å {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–∞—Ç—É
        current_date = start_date
        while current_date <= end_date:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã: {current_date.strftime('%Y-%m-%d')}")
            await process_date(current_date, espn_service, image_service, telegram_service, history, logger, args.no_send)
            current_date += timedelta(days=1)
            await asyncio.sleep(5)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏

if __name__ == "__main__":
    asyncio.run(main()) 