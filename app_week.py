import requests
import json
from datetime import datetime
import logging
from telegram import Bot
from dotenv import load_dotenv
import os
import asyncio
from PIL import Image, ImageDraw, ImageFont
import pytz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOG_FILE = "/home/lex/dev/bot/fantasy-hockey-bot/log.txt"
PLAYER_STATS_FILE = "/home/lex/dev/bot/fantasy-hockey-bot/player_stats.json"
MOSCOW_TIMEZONE = pytz.timezone('Europe/Moscow')

# –ì—Ä–µ–π–¥—ã –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Ü–≤–µ—Ç–∞
GRADE_COLORS = {
    "common": "black",
    "uncommon": "green",
    "rare": "blue",
    "epic": "purple",
    "legend": "orange"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('/home/lex/dev/bot/fantasy-hockey-bot/.env')

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

if not TELEGRAM_TOKEN or not CHAT_ID:
    logging.error("TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env.")
    exit(1)

bot = Bot(token=TELEGRAM_TOKEN)


def load_player_stats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(PLAYER_STATS_FILE):
        with open(PLAYER_STATS_FILE, "r") as f:
            return json.load(f)
    return {}


def get_top_players(stats):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º."""
    positions = {'C': [], 'LW': [], 'RW': [], 'D': [], 'G': []}

    for name, player_data in stats.items():
        grade = player_data.get('grade', 'common')
        color = GRADE_COLORS.get(grade, 'black')
        last_position = player_data.get('last_position', None)

        if not last_position:
            logging.warning(f"–ò–≥—Ä–æ–∫ {name} –Ω–µ –∏–º–µ–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ 'last_position'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞: {name}, –ø–æ–∑–∏—Ü–∏—è: {last_position}, –æ—á–∫–∏: {player_data['total_points']}")
        positions[last_position].append({
            'name': name,
            'total_points': player_data['total_points'],
            'appearances': player_data['appearances'],
            'grade': grade,
            'color': color,
        })

    team = {
        'C': sorted(positions['C'], key=lambda x: x['total_points'], reverse=True)[:1],
        'LW': sorted(positions['LW'], key=lambda x: x['total_points'], reverse=True)[:1],
        'RW': sorted(positions['RW'], key=lambda x: x['total_points'], reverse=True)[:1],
        'D': sorted(positions['D'], key=lambda x: x['total_points'], reverse=True)[:2],
        'G': sorted(positions['G'], key=lambda x: x['total_points'], reverse=True)[:1]
    }

    logging.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–µ–ª–∏: {team}")
    return team



def create_collage(team):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–µ–ª–∏."""
    player_img_width, player_img_height = 130, 100
    padding = 20
    text_padding = 10
    line_height = player_img_height + text_padding + 30 + padding

    total_players = sum(len(players) for players in team.values())
    height = total_players * line_height + padding * 2

    width = 500
    image = Image.new("RGB", (width, height), "white")
    draw = ImageDraw.Draw(image)

    font_path = "/usr/share/fonts/ttf/dejavu/DejaVuSans.ttf"
    font = ImageFont.truetype(font_path, size=20)

    y_offset = padding
    for position, players in team.items():
        for player in players:
            name = player['name']
            points = player['total_points']
            color = player['color']

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = f"{position}: {name} ({points:.2f} ftps)"
            text_width = draw.textlength(text, font=font)
            text_x = (width - text_width) // 2

            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
            draw.text((text_x, y_offset), text, fill=color, font=font)

            y_offset += line_height

    file_path = "/home/lex/dev/bot/fantasy-hockey-bot/team_week_collage.jpg"
    image.save(file_path)
    return file_path


async def send_collage(team):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–∞–∂ —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ Telegram."""
    file_path = create_collage(team)
    try:
        with open(file_path, "rb") as photo:
            await bot.send_photo(chat_id=CHAT_ID, photo=photo, caption="üèí <b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–µ–ª–∏</b>", parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")


async def main():
    logging.info("–ó–∞–ø—É—Å–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–µ–ª–∏.")
    stats = load_player_stats()

    if not stats:
        logging.error("–§–∞–π–ª player_stats.json –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    team = get_top_players(stats)
    await send_collage(team)


if __name__ == "__main__":
    asyncio.run(main())
